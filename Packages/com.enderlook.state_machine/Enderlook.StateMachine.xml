<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Enderlook.StateMachine</name>
    </assembly>
    <members>
        <member name="T:Enderlook.StateMachine.InitializationPolicy">
            <summary>
            Determines the excution order of subscribed delegates of <see cref="M:Enderlook.StateMachine.StateBuilder`3.OnEntry(System.Action)"/> (and overloads) during the initialization of the state machine.<br/>
            This determines the order of execution of delegates from the initial state set by <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.SetInitialState(`0,Enderlook.StateMachine.InitializationPolicy)"/> (and parent states if the initial state is a substate).
            </summary>
        </member>
        <member name="F:Enderlook.StateMachine.InitializationPolicy.Ignore">
            <summary>
            Determines that subscribed delegates should not run.
            </summary>
        </member>
        <member name="F:Enderlook.StateMachine.InitializationPolicy.ParentFirst">
            <summary>
            Determines that subscribed delegates on parents are run first.<br/>
            For example:
            <c>... -> ParentOf(ParentOf(n)) -> ParentOf(n) -> n</c>.
            </summary>
        </member>
        <member name="F:Enderlook.StateMachine.InitializationPolicy.ChildFirst">
            <summary>
            Determines that subscribed delegates on children are run first.<br/>
            For example:
            <c>n -> ParentOf(n) -> ParentOf(ParentOf(n)) -> ...</c>.
            </summary>
        </member>
        <member name="F:Enderlook.StateMachine.InitializationPolicy.Current">
            <summary>
            Determines that only the subscribed delegates of the current state are run.<br/>
            Delegates subscribed on parent states won't be run.
            For example:
            <c>n</c>,
            </summary>
        </member>
        <member name="T:Enderlook.StateMachine.GotoBuilder`4">
            <summary>
            Builder of goto transitions.
            </summary>
            <typeparam name="TState">Type that determines states.</typeparam>
            <typeparam name="TEvent">Type that determines events.</typeparam>
            <typeparam name="TRecipient">Type that determines internal data that can be acceded by actions.</typeparam>
            <typeparam name="TParent">Type of parent of the <see cref="T:Enderlook.StateMachine.TransitionBuilder`4"/> instance which creates this instance.</typeparam>
        </member>
        <member name="M:Enderlook.StateMachine.GotoBuilder`4.OnEntryPolicy(Enderlook.StateMachine.TransitionPolicy)">
            <summary>
            Configures the policy of how subscribed delegates to on entry hook should be executed.<br/>
            If this method is not executed, the default policy is <see cref="F:Enderlook.StateMachine.TransitionPolicy.ParentFirstWithCulling"/>.
            </summary>
            <param name="policy">Policy of subscribed delegates execution.</param>
            <returns><see langword="this"/>.</returns>
        </member>
        <member name="M:Enderlook.StateMachine.GotoBuilder`4.OnExitPolicy(Enderlook.StateMachine.TransitionPolicy)">
            <summary>
            Configures the policy of how subscribed delegates to on exit hook should be executed.<br/>
            If this method is not executed, the default policy is <see cref="F:Enderlook.StateMachine.TransitionPolicy.ChildFirstWithCulling"/>.
            </summary>
            <param name="policy">Policy of subscribed delegates execution.</param>
            <returns><see langword="this"/>.</returns>
        </member>
        <member name="M:Enderlook.StateMachine.GotoBuilder`4.Goto(`0)">
            <summary>
            Determines to which state this transition goes.
            </summary>
            <param name="state">State to move</param>
            <returns>Creator of the instance which created this instance.</returns>
        </member>
        <member name="M:Enderlook.StateMachine.GotoBuilder`4.GotoSelf">
            <summary>
            Determines to transite to the current state.
            </summary>
            <returns>Creator of the instance which created this instance.</returns>
        </member>
        <member name="T:Enderlook.StateMachine.StateBuilder`3">
            <summary>
            Builder of a concrete state.
            </summary>
            <typeparam name="TState">Type that determines states.</typeparam>
            <typeparam name="TEvent">Type that determines events.</typeparam>
            <typeparam name="TRecipient">Type that determines internal data that can be acceded by actions.</typeparam>
        </member>
        <member name="M:Enderlook.StateMachine.StateBuilder`3.In(`0)">
            <inheritdoc cref="M:Enderlook.StateMachine.StateBuilder`3.In(`0)"/>
        </member>
        <member name="M:Enderlook.StateMachine.StateBuilder`3.Finalize">
            <inheritdoc cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/>
        </member>
        <member name="M:Enderlook.StateMachine.StateBuilder`3.IsSubStateOf(`0)">
            <summary>
            Marks this state as a substate of <paramref name="state"/>.
            </summary>
            <param name="state">Parent state of this state.</param>
            <returns><see langword="this"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="state"/> is <see langword="null"/><br/>
            Thrown when <paramref name="state"/> is the current state.</exception>
            <exception cref="T:System.InvalidOperationException">Throw when this state was already configured as a substate.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.StateBuilder`3.OnEntry(System.Action)">
            <summary>
            Determines an action to execute on entry to this state.
            </summary>
            <param name="action">Action to execute.</param>
            <returns><see langword="this"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.StateBuilder`3.OnEntry(System.Action{`2})">
            <summary>
            Determines an action to execute on entry to this state.
            </summary>
            <param name="action">Action to execute.</param>
            <returns><see langword="this"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.StateBuilder`3.OnEntry``1(System.Action{``0})">
            <summary>
            Determines an action to execute on entry to this state.<br/>
            This action will only be executed if the event is fired with the specific <typeparamref name="TParameter"/> type.
            </summary>
            <typeparam name="TParameter">Type of parameter passed to the action when a trigger is fired.</typeparam>
            <param name="action">Action to execute.</param>
            <returns><see langword="this"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.StateBuilder`3.OnEntry``1(System.Action{`2,``0})">
            <summary>
            Determines an action to execute on entry to this state.<br/>
            This action will only be executed if the event is fired with the specific <typeparamref name="TParameter"/> type.
            </summary>
            <typeparam name="TParameter">Type of parameter passed to the action when a trigger is fired.</typeparam>
            <param name="action">Action to execute.</param>
            <returns><see langword="this"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.StateBuilder`3.OnExit(System.Action)">
            <summary>
            Determines an action to execute on entry to this state.
            </summary>
            <param name="action">Action to execute.</param>
            <returns><see langword="this"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.StateBuilder`3.OnExit(System.Action{`2})">
            <summary>
            Determines an action to execute on exit to this state.
            </summary>
            <param name="action">Action to execute.</param>
            <returns><see langword="this"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.StateBuilder`3.OnExit``1(System.Action{``0})">
            <summary>
            Determines an action to execute on exit to this state.<br/>
            This action will only be executed if the event is fired with the specific <typeparamref name="TParameter"/> type.
            </summary>
            <typeparam name="TParameter">Type of parameter passed to the action when a trigger is fired.</typeparam>
            <param name="action">Action to execute.</param>
            <returns><see langword="this"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.StateBuilder`3.OnExit``1(System.Action{`2,``0})">
            <summary>
            Determines an action to execute on exit to this state.<br/>
            This action will only be executed if the event is fired with the specific <typeparamref name="TParameter"/> type.
            </summary>
            <typeparam name="TParameter">Type of parameter passed to the action when a trigger is fired.</typeparam>
            <param name="action">Action to execute.</param>
            <returns><see langword="this"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.StateBuilder`3.OnUpdate(System.Action)">
            <summary>
            Determines an action to execute on eupdate while in this state.
            </summary>
            <param name="action">Action to execute.</param>
            <returns><see langword="this"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.StateBuilder`3.OnUpdate(System.Action{`2})">
            <summary>
            Determines an action to execute on update while in this state.
            </summary>
            <param name="action">Action to execute.</param>
            <returns><see langword="this"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.StateBuilder`3.OnUpdate``1(System.Action{``0})">
            <summary>
            Determines an action to execute on update while in this state.<br/>
            This action will only be executed if the update is fired with the specific <typeparamref name="TParameter"/> type.
            </summary>
            <typeparam name="TParameter">Type of parameter passed to the action when a trigger is fired.</typeparam>
            <param name="action">Action to execute.</param>
            <returns><see langword="this"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.StateBuilder`3.OnUpdate``1(System.Action{`2,``0})">
            <summary>
            Determines an action to execute on update while in this state.<br/>
            This action will only be executed if the update is fired with the specific <typeparamref name="TParameter"/> type.
            </summary>
            <typeparam name="TParameter">Type of parameter passed to the action when a trigger is fired.</typeparam>
            <param name="action">Action to execute.</param>
            <returns><see langword="this"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.StateBuilder`3.On(`1)">
            <summary>
            Add a behaviour that is executed on an event.
            </summary>
            <param name="event">Raised event.</param>
            <returns>Transition builder.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="event"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.StateBuilder`3.Ignore(`1)">
            <summary>
            Ignore this event.<br/>
            Equivalent to <c>.On(@event).StaySelf()</c>.
            </summary>
            <param name="event">Event to ignore.</param>
            <returns><see langword="this"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="event"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Enderlook.StateMachine.StateMachineBuilder`3">
            <summary>
            Builder of an state machine.
            </summary>
            <typeparam name="TState">Type that determines states.</typeparam>
            <typeparam name="TEvent">Type that determines events.</typeparam>
            <typeparam name="TRecipient">Type that determines internal data that can be acceded by actions.</typeparam>
        </member>
        <member name="M:Enderlook.StateMachine.StateMachineBuilder`3.SetInitialState(`0,Enderlook.StateMachine.InitializationPolicy)">
            <summary>
            Determines the initial state of the state machine.
            </summary>
            <param name="state">Initial state.</param>
            <param name="initializationPolicy">Determines the execution order of subscribed delegates in <see cref="M:Enderlook.StateMachine.StateBuilder`3.OnEntry(System.Action)"/> (and overloads) in the initial state.</param>
            <returns><see langword="this"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="state"/> is <see langword="null"/>.<br/>
            Thrown when the initial state was already registered.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.StateMachineBuilder`3.In(`0)">
            <summary>
            Add a new state or loads a previously added state.
            </summary>
            <param name="state">State to add.</param>
            <returns>State builder.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="state"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize">
            <summary>
            Creates a factory of the current state machine plan.
            </summary>
            <returns>Created factory.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.SetInitialState(`0,Enderlook.StateMachine.InitializationPolicy)"/> was not called.<br/>
            Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.In(`0)"/> was not called.<br/>
            Thrown when a transition was not terminated with <see cref="M:Enderlook.StateMachine.TransitionBuilder`4.Goto(`0)"/>, <see cref="M:Enderlook.StateMachine.TransitionBuilder`4.StaySelf"/> nor <see cref="T:Enderlook.StateMachine.TransitionBuilder`4"/>.<br/>
            Thrown when an state has a not registered parent state passed to <see cref="M:Enderlook.StateMachine.StateBuilder`3.IsSubStateOf(`0)"/>.
            </exception>
        </member>
        <member name="T:Enderlook.StateMachine.TransitionBuilder`4">
            <summary>
            Builder of concrete transitions.
            </summary>
            <typeparam name="TState">Type that determines states.</typeparam>
            <typeparam name="TEvent">Type that determines events.</typeparam>
            <typeparam name="TRecipient">Type that determines internal data that can be acceded by actions.</typeparam>
            <typeparam name="TParent">Type of parent which creates this instance.</typeparam>
        </member>
        <member name="M:Enderlook.StateMachine.TransitionBuilder`4.If(System.Func{System.Boolean})">
            <summary>
            Add a sub transition with a condition.
            </summary>
            <param name="guard">Condition to execute transition.</param>
            <returns>Sub transition.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="guard"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.TransitionBuilder`4.If(System.Func{`2,System.Boolean})">
            <summary>
            Add a sub transition with a condition.
            </summary>
            <param name="guard">Condition to execute transition.</param>
            <returns>Sub transition.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="guard"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.TransitionBuilder`4.If``1(System.Func{``0,System.Boolean})">
            <summary>
            Add a sub transition with a condition.<br/>
            This guard will only be executed if the event is fired with the specific <typeparamref name="TParameter"/> type.
            </summary>
            <param name="guard">Condition to execute transition.</param>
            <returns>Sub transition.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="guard"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.TransitionBuilder`4.If``1(System.Func{`2,``0,System.Boolean})">
            <summary>
            Add a sub transition with a condition.<br/>
            This guard will only be executed if the event is fired with the specific <typeparamref name="TParameter"/> type.
            </summary>
            <param name="guard">Condition to execute transition.</param>
            <returns>Sub transition.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="guard"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.TransitionBuilder`4.Do(System.Action)">
            <summary>
            Determines an action to execute when the event (or branch if this instance cames from an <see cref="M:Enderlook.StateMachine.TransitionBuilder`4.If(System.Func{System.Boolean})"/> or any of its oveload calls) is raised.
            </summary>
            <param name="action">Action to execute.</param>
            <returns><see langword="this"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.TransitionBuilder`4.Do(System.Action{`2})">
            <summary>
            Determines an action to execute when the event (or branch if this instance cames from an <see cref="M:Enderlook.StateMachine.TransitionBuilder`4.If(System.Func{System.Boolean})"/> or any of its oveload calls) is raised.
            </summary>
            <param name="action">Action to execute.</param>
            <returns><see langword="this"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.TransitionBuilder`4.Do``1(System.Action{``0})">
            <summary>
            Determines an action to execute when the event (or branch if this instance cames from an <see cref="M:Enderlook.StateMachine.TransitionBuilder`4.If(System.Func{System.Boolean})"/> or any of its oveload calls) is raised.<br/>
            This action will only be executed if the event is fired with the specific <typeparamref name="TParameter"/> type.
            </summary>
            <typeparam name="TParameter">Type of parameter passed to the action when a trigger is fired.</typeparam>
            <param name="action">Action to execute.</param>
            <returns><see langword="this"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.TransitionBuilder`4.Do``1(System.Action{`2,``0})">
            <summary>
            Determines an action to execute when the event (or branch if this instance cames from an <see cref="M:Enderlook.StateMachine.TransitionBuilder`4.If(System.Func{System.Boolean})"/> or any of its oveload calls) is raised.<br/>
            This action will only be executed if the event is fired with the specific <typeparamref name="TParameter"/> type.
            </summary>
            <typeparam name="TParameter">Type of parameter passed to the action when a trigger is fired.</typeparam>
            <param name="action">Action to execute.</param>
            <returns><see langword="this"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.TransitionBuilder`4.OnEntryPolicy(Enderlook.StateMachine.TransitionPolicy)">
            <inheritdoc cref="M:Enderlook.StateMachine.GotoBuilder`4.OnEntryPolicy(Enderlook.StateMachine.TransitionPolicy)"/>
        </member>
        <member name="M:Enderlook.StateMachine.TransitionBuilder`4.OnExitPolicy(Enderlook.StateMachine.TransitionPolicy)">
            <inheritdoc cref="M:Enderlook.StateMachine.GotoBuilder`4.OnEntryPolicy(Enderlook.StateMachine.TransitionPolicy)"/>
        </member>
        <member name="M:Enderlook.StateMachine.TransitionBuilder`4.Goto(`0)">
            <summary>
            Determines to which state this transition goes.<br/>
            This is equivalent to <c>OnEntryPolicy(TransitionPolicy.ChildFirstWithCulling).OnExitPolicy(TransitionPolicy.ParentFirstWithCulling).Goto(state)</c>.
            </summary>
            <param name="state">State to move</param>
            <returns>Creator of this instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.<br/>
            Thrown when <paramref name="state"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.TransitionBuilder`4.GotoSelf(System.Boolean)">
            <summary>
            Determines to transite to the current state (reentrant).<br/>
            If <paramref name="runParentsActions"/> is <see langword="false"/> on exit and on entry actions of current state (but not parent states in case of current state being a substate) will be executed.<br/>
            This is equivalent to <c>OnEntryPolicy(TransitionPolicy.ChildFirstWithCullingInclusive).OnExitPolicy(TransitionPolicy.ParentFirstWithCullingInclusive).Goto(currentState)</c>.<br/>
            If <paramref name="runParentsActions"/> is <see langword="true"/> on exit and on entry actions of the current state (and parents in case of current state being a substate) will be executed.<br/>
            This is equivalent to <c>OnEntryPolicy(TransitionPolicy.ChildFirst).OnExitPolicy(TransitionPolicy.ParentFirst).Goto(currentState)</c>.<br/>
            </summary>
            <param name="runParentsActions">Determines if parent(s) actions should be executed or not in case of being a substate.</param>
            <returns>Creator of this instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.TransitionBuilder`4.StaySelf">
            <summary>
            Determines that will have no transition to any state, so no on entry nor on exit event will be raised.<br/>
            This is equivalent to either <c>OnEntryPolicy(TransitionPolicy.Ignore).OnExitPolicy(TransitionPolicy.Ignore).GotoSelf()</c> or <c>OnEntryPolicy(TransitionPolicy.ChildFirstWithCulling).OnExitPolicy(TransitionPolicy.ParentFirstWithCulling).GotoSelf()</c> (in a state transition of <c>Self -> Self</c> both codes produces the same effect).
            </summary>
            <returns>Creator of this instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="M:Enderlook.StateMachine.StateMachineBuilder`3.Finalize"/> or <see cref="M:Enderlook.StateMachine.StateBuilder`3.Finalize"/> has already been called in this builder's hierarchy.</exception>
        </member>
        <member name="T:Enderlook.StateMachine.TransitionPolicy">
            <summary>
            Determines the transition policy between two states.<br/>
            This configures how subscribed delegates on states are run during transition between states.
            </summary>
        </member>
        <member name="F:Enderlook.StateMachine.TransitionPolicy.Ignore">
            <summary>
            Determines that subscribed delegates should not run.
            </summary>
        </member>
        <member name="F:Enderlook.StateMachine.TransitionPolicy.ParentFirst">
            <summary>
            Determines that subscribed delegates on parents are run first.<br/>
            For example:
            <c>... -> ParentOf(ParentOf(n)) -> ParentOf(n) -> n</c>.
            </summary>
        </member>
        <member name="F:Enderlook.StateMachine.TransitionPolicy.ChildFirst">
            <summary>
            Determines that subscribed delegates on children are run first.<br/>
            For example:
            <c>n -> ParentOf(n) -> ParentOf(ParentOf(n)) -> ...</c>.
            </summary>
        </member>
        <member name="F:Enderlook.StateMachine.TransitionPolicy.ParentFirstWithCulling">
            <summary>
            Determines that subscribed delegates on parents are run first from (exluding) the last common parent between the two states.<br/>
            For example:<br/>
            If <c>ParentOf(ParentOf(n)) == ParentOf(ParentOf(m))</c>:<br/>
            <c>ParentOf(n) -> n</c>.<br/>
            If <c>ParentOf(ParentOf(n)) != ParentOf(ParentOf(m))</c>:<br/>
            <c>... -> ParentOf(ParentOf(n)) -> ParentOf(n) -> n</c>.<br/>
            If <c>n == m</c>:<br/>
            <c>... -> ParentOf(ParentOf(n)) -> ParentOf(n)</c>.
            </summary>
        </member>
        <member name="F:Enderlook.StateMachine.TransitionPolicy.ChildFirstWithCulling">
            <summary>
            Determines that subscribed delegates on children are run first until reach (excluding) the last common parent between the two states.<br/>
            For example:<br/>
            If <c>ParentOf(ParentOf(n)) == ParentOf(ParentOf(m))</c>:<br/>
            <c>n -> ParentOf(n)</c>.<br/>
            If <c>ParentOf(ParentOf(n)) != ParentOf(ParentOf(m))</c>:<br/>
            <c>n -> ParentOf(n) -> ParentOf(ParentOf(n)) -> ...</c>.<br/>
            If <c>n == m</c>:<br/>
            <c>ParentOf(n) --> ParentOf(ParentOf(n)) -> ...</c>.
            </summary>
        </member>
        <member name="F:Enderlook.StateMachine.TransitionPolicy.ParentFirstWithCullingInclusive">
            <summary>
            Determines that subscribed delegates on parents are run first from (including) the last common parent between the two states.<br/>
            For example:<br/>
            If <c>ParentOf(ParentOf(n)) == ParentOf(ParentOf(m))</c>:<br/>
            <c>ParentOf(ParentOf(n)) -> ParentOf(n) -> n</c>.<br/>
            If <c>ParentOf(ParentOf(n)) != ParentOf(ParentOf(m))</c>:<br/>
            <c>... -> ParentOf(ParentOf(n)) -> ParentOf(n) -> n</c>.<br/>
            If <c>n == m</c>:<br/>
            <c>ParentOf(ParentOf(n)) -> ParentOf(n) -> n</c>.
            </summary>
        </member>
        <member name="F:Enderlook.StateMachine.TransitionPolicy.ChildFirstWithCullingInclusive">
            <summary>
            Determines that subscribed delegates on children are run first until reach (including) the last common parent between the two states.<br/>
            For example:<br/>
            If <c>ParentOf(ParentOf(n)) == ParentOf(ParentOf(m))</c>:<br/>
            <c>n -> ParentOf(n)</c> -> ParentOf(ParentOf(n)).<br/>
            If <c>ParentOf(ParentOf(n)) != ParentOf(ParentOf(m))</c>:<br/>
            <c>n -> ParentOf(n) -> ParentOf(ParentOf(n)) -> ...</c>.<br/>
            If <c>n == m</c>:<br/>
            <c>n -> ParentOf(n) --> ParentOf(ParentOf(n)) -> ...</c>.
            </summary>
        </member>
        <member name="T:Enderlook.StateMachine.ReadOnlySlice`1">
            <summary>
            Represent an slice of data.
            </summary>
            <typeparam name="T">Type of data.</typeparam>
        </member>
        <member name="P:Enderlook.StateMachine.ReadOnlySlice`1.Item(System.Int32)">
            <summary>
            Get the element specified at the index.
            </summary>
            <param name="index">Index to retrieve.</param>
            <returns>Element at the index <paramref name="index"/>.</returns>
        </member>
        <member name="P:Enderlook.StateMachine.ReadOnlySlice`1.Count">
            <inheritdoc cref="P:System.Collections.Generic.IReadOnlyCollection`1.Count"/>
        </member>
        <member name="P:Enderlook.StateMachine.ReadOnlySlice`1.Memory">
            <summary>
            Get an <see cref="T:System.ReadOnlyMemory`1"/> of this slice.
            </summary>
        </member>
        <member name="P:Enderlook.StateMachine.ReadOnlySlice`1.Span">
            <summary>
            Get an <see cref="T:System.ReadOnlySpan`1"/> of this slice.
            </summary>
        </member>
        <member name="M:Enderlook.StateMachine.ReadOnlySlice`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.StateMachine.ReadOnlySlice`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.StateMachine.ReadOnlySlice`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.StateMachine.ReadOnlySlice`1.Enumerator">
            <summary>
            Enumerator of <see cref="T:Enderlook.StateMachine.ReadOnlySlice`1"/>.
            </summary>
        </member>
        <member name="P:Enderlook.StateMachine.ReadOnlySlice`1.Enumerator.Current">
            <inheritdoc cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="P:Enderlook.StateMachine.ReadOnlySlice`1.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:Enderlook.StateMachine.ReadOnlySlice`1.Enumerator.System#IDisposable#Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:Enderlook.StateMachine.ReadOnlySlice`1.Enumerator.MoveNext">
            <inheritdoc cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:Enderlook.StateMachine.ReadOnlySlice`1.Enumerator.Reset">
            <inheritdoc cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="T:Enderlook.StateMachine.StateMachine`3">
            <summary>
            Representation of an state machine.
            </summary>
            <typeparam name="TState">Type that determines states.</typeparam>
            <typeparam name="TEvent">Type that determines events.</typeparam>
            <typeparam name="TRecipient">Type that determines internal data that can be acceded by actions.</typeparam>
        </member>
        <member name="P:Enderlook.StateMachine.StateMachine`3.CurrentState">
            <summary>
            Returns the current (possibly sub) state of this state machine.
            </summary>
        </member>
        <member name="P:Enderlook.StateMachine.StateMachine`3.CurrentStateHierarchy">
            <summary>
            Returns the current state of this state machine.<br/>
            If the state is a substate, its parent hierarchy is included.
            </summary>
        </member>
        <member name="P:Enderlook.StateMachine.StateMachine`3.CurrentAcceptedEvents">
            <summary>
            Returns the events that are accepted by the current (possibly sub) state of this state machine.<br/>
            May be empty if doesn't accept any other event (is terminal).
            </summary>
        </member>
        <member name="M:Enderlook.StateMachine.StateMachine`3.CreateFactoryBuilder">
            <summary>
            Creates the builder of an state machine.
            </summary>
            <returns>Builder of the state machine.</returns>
        </member>
        <member name="M:Enderlook.StateMachine.StateMachine`3.GetParentStateOf(`0,`0@)">
            <summary>
            Return the parent state of <paramref name="state"/>, if any.
            </summary>
            <param name="state">State whose parent is looked for.</param>
            <param name="parentState">If returns <see langword="true"/>, this is the parent state of <paramref name="state"/>.</param>
            <returns>Whenever <paramref name="state"/> is a substate.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="state"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.StateMachine`3.GetParentHierarchyOf(`0)">
            <summary>
            Return the parent hierarchy of <paramref name="state"/>, if any.
            </summary>
            <param name="state">State whose parent hierarchy is looked for.</param>
            <returns>Parent hierarchy of <paramref name="state"/>. May be empty if <paramref name="state"/> is not substate of any other state.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="state"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.StateMachine`3.GetAcceptedEventsBy(`0)">
            <summary>
            Returns the events that are accepted by <paramref name="state"/>, if any.
            </summary>
            <param name="state">State whose accepted events are looked for.</param>
            <returns>Accepted events by <paramref name="state"/>. May be empty if <paramref name="state"/> doesn't accept any other event (is terminal).</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="state"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.StateMachine`3.IsInState(`0)">
            <summary>
            Determines if the <paramref name="state"/> is the current state or superstate of the current state.
            </summary>
            <param name="state">State to check.</param>
            <returns>Whenever the current state if <paramref name="state"/> or a substate of <paramref name="state"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="state"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.StateMachine`3.Fire(`1)">
            <summary>
            Fire an event to the state machine.<br/>
            If the state machine is already firing an state, it's enqueued to run after completion of the current event.
            </summary>
            <param name="event">Event to fire.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="event"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown a parameter builder associated with this state machine has not been finalized.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.StateMachine`3.FireImmediately(`1)">
            <summary>
            Fire an event to the state machine.<br/>
            The event won't be enqueued but actually run, ignoring previously enqueued events.<br/>
            If subsequent events are enqueued during the execution of the callbacks of this event, they will also be run after the completion of this event.
            </summary>
            <param name="event">Event to fire.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="event"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown a parameter builder associated with this state machine has not been finalized.</exception>
        </member>
        <member name="M:Enderlook.StateMachine.StateMachine`3.Update">
            <summary>
            Executes the update callbacks registered in the current state.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown a parameter builder associated with this state machine has not been finalized.</exception>
        </member>
        <member name="T:Enderlook.StateMachine.StateMachine`3.InitializeParametersBuilder">
            <summary>
            Parameters builder of method <see cref="M:Enderlook.StateMachine.StateMachineFactory`3.With``1(``0)"/>.
            </summary>
        </member>
        <member name="M:Enderlook.StateMachine.StateMachine`3.InitializeParametersBuilder.With``1(``0)">
            <summary>
            Stores a parameter that can be passed to callbacks.
            </summary>
            <typeparam name="TParameter">Type of parameter.</typeparam>
            <param name="parameter">Parameter than can be passed to callbacks.</param>
            <returns><see langword="this"/>.</returns>
        </member>
        <member name="M:Enderlook.StateMachine.StateMachine`3.InitializeParametersBuilder.Create(`2)">
            <inheritdoc cref="M:Enderlook.StateMachine.StateMachineFactory`3.Create(`2)"/>
        </member>
        <member name="M:Enderlook.StateMachine.StateMachine`3.With``1(``0)">
            <summary>
            Stores a parameter(s) to pass on the next method call.
            </summary>
            <typeparam name="TParameter">Parameter type.</typeparam>
            <param name="parameter">Parameter to store.</param>
            <returns>A builder of parameters to store.</returns>
        </member>
        <member name="T:Enderlook.StateMachine.StateMachine`3.ParametersBuilder">
            <summary>
            Parameters builder of methods <see cref="M:Enderlook.StateMachine.StateMachine`3.Fire(`1)"/>, <see cref="M:Enderlook.StateMachine.StateMachine`3.FireImmediately(`1)"/> and <see cref="M:Enderlook.StateMachine.StateMachine`3.Update"/>.
            </summary>
        </member>
        <member name="M:Enderlook.StateMachine.StateMachine`3.ParametersBuilder.With``1(``0)">
            <summary>
            Stores a parameter that can be passed to callbacks.
            </summary>
            <typeparam name="TParameter">Type of parameter.</typeparam>
            <param name="parameter">Parameter than can be passed to callbacks.</param>
            <returns><see langword="this"/>.</returns>
        </member>
        <member name="M:Enderlook.StateMachine.StateMachine`3.ParametersBuilder.Fire(`1)">
            <inheritdoc cref="M:Enderlook.StateMachine.StateMachine`3.Fire(`1)"/>
        </member>
        <member name="M:Enderlook.StateMachine.StateMachine`3.ParametersBuilder.FireImmediately(`1)">
            <inheritdoc cref="M:Enderlook.StateMachine.StateMachine`3.FireImmediately(`1)"/>
        </member>
        <member name="M:Enderlook.StateMachine.StateMachine`3.ParametersBuilder.Update">
            <inheritdoc cref="M:Enderlook.StateMachine.StateMachine`3.Update"/>
        </member>
        <member name="T:Enderlook.StateMachine.StateMachineFactory`3">
            <summary>
            Factory of state machines.
            </summary>
            <typeparam name="TState">Type that determines states.</typeparam>
            <typeparam name="TEvent">Type that determines events.</typeparam>
            <typeparam name="TRecipient">Type that determines internal data that can be acceded by actions.</typeparam>
        </member>
        <member name="M:Enderlook.StateMachine.StateMachineFactory`3.Create(`2)">
            <summary>
            Creates a configured and initialized <see cref="T:Enderlook.StateMachine.StateMachine`3"/> using the configuration provided by this factory.<br/>
            This method is thread-safe.
            </summary>
            <param name="recipient">Recipient for the new created <see cref="T:Enderlook.StateMachine.StateMachine`3"/>.</param>
            <returns>New <see cref="T:Enderlook.StateMachine.StateMachine`3"/>.</returns>
        </member>
        <member name="M:Enderlook.StateMachine.StateMachineFactory`3.With``1(``0)">
            <summary>
            Creates a configured and initialized <see cref="T:Enderlook.StateMachine.StateMachine`3"/> using the configuration provided by this factory.<br/>
            This method is thread-safe.<br/>
            Additionally, this methods allows to store a parameter that will be passed to the subscribed delegates of the on entry of the initial state (this is ignored is the factory was configured to do so).
            </summary>
            <typeparam name="TParameter">Parameter type.</typeparam>
            <param name="parameter">Parameter to store.</param>
            <returns>A builder of parameters to store that will be passed during the creation of the instance.</returns>
        </member>
    </members>
</doc>
