<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Enderlook.Collections-Extensions</name>
    </assembly>
    <members>
        <member name="T:Enderlook.Collections.ArrayExtensions">
            <summary>
            Extension functions for arrays.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.ArrayExtensions.ChangeEach``1(``0[],System.Func{``0,``0})">
            <summary>
            Performs the specified <paramref name="function"/> on each element of the <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of the element in <paramref name="source"/>.</typeparam>
            <param name="source">Source to look for element to perform the <paramref name="function"/></param>
            <param name="function">Function to perform on each element of <paramref name="source"/></param>
            <returns>Updated <paramref name="source"/>.</returns>
            <seealso cref="M:System.Array.ForEach``1(``0[],System.Action{``0})"/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="function"/> are <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.Collections.ArrayExtensions.ChangeEach``1(``0[],System.Func{``0,System.Int32,``0})">
            <summary>
            Performs the specified <paramref name="function"/> on each element of the <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of the element in <paramref name="source"/>.</typeparam>
            <param name="source">Source to look for element to perform the <paramref name="function"/></param>
            <param name="function">Function to perform on each element of <paramref name="source"/></param>
            <returns>Updated <paramref name="source"/>.</returns>
            <seealso cref="M:System.Array.ForEach``1(``0[],System.Action{``0})"/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="function"/> are <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.Collections.ArrayExtensions.ForEach``1(``0[],System.Action{``0})">
            <summary>
            Performs the specified <paramref name="action"/> on each element of the <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of the element in <paramref name="source"/>.</typeparam>
            <param name="source">Source to look for element to perform the <paramref name="action"/></param>
            <param name="action">Action to perform on each element of <paramref name="source"/></param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="action"/> are <see langword="null"/>.</exception>
            <seealso cref="M:System.Array.ForEach``1(``0[],System.Action{``0})"/>
        </member>
        <member name="M:Enderlook.Collections.ArrayExtensions.ForEach``1(``0[],System.Action{``0,System.Int32})">
            <summary>
            Performs the specified <paramref name="action"/> on each element of the <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of the element in <paramref name="source"/>.</typeparam>
            <param name="source">Source to look for element to perform the <paramref name="action"/></param>
            <param name="action">Action to perform on each element of <paramref name="source"/></param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="action"/> are <see langword="null"/>.</exception>
            <seealso cref="M:System.Array.ForEach``1(``0[],System.Action{``0})"/>
        </member>
        <member name="T:Enderlook.Collections.BinarySearchExtensions">
            <summary>
            Extension functions to do binary searchs in collections.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.BinarySearchExtensions.BinarySearchFirst``1(System.Collections.Generic.List{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the zero-based index of the first occurrence of a value in the <paramref name="source"/> or in a portion of it.<br/>
            Only use if <paramref name="source"/> is sorted.
            </summary>
            <typeparam name="T">Element <paramref name="item"/>.</typeparam>
            <param name="source">Where the index of <paramref name="item"/> will be looked for.</param>
            <param name="item">The object to locate in the <paramref name="source"/>. The value can be <see langword="null"/> for reference types.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements. Use <see langword="null"/> to use <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.</param>
            <returns>The zero-based index of value in the sorted <paramref name="source"/>, if <paramref name="item"/> is found;<br/>
            otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or,<br/>
            if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Enderlook.Collections.BinarySearchExtensions.BinarySearchFirst``1(System.Collections.Generic.List{``0},``0,System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the zero-based index of the first occurrence of a value in the <paramref name="source"/> or in a portion of it.<br/>
            Only use if <paramref name="source"/> is sorted.
            </summary>
            <typeparam name="T">Element <paramref name="item"/>.</typeparam>
            <param name="source">Where the index of <paramref name="item"/> will be looked for.</param>
            <param name="item">The object to locate in the <paramref name="source"/>. The value can be <see langword="null"/> for reference types.</param>
            <param name="index">The zero-based starting index of the range to search.</param>
            <param name="count">The length of the range to search.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements. Use <see langword="null"/> to use <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.</param>
            <returns>The zero-based index of value in the sorted <paramref name="source"/>, if <paramref name="item"/> is found;<br/>
            otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or,<br/>
            if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Enderlook.Collections.BinarySearchExtensions.BinarySearchFirst``1(``0[],``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the zero-based index of the first occurrence of a value in the <paramref name="source"/> or in a portion of it.<br/>
            Only use if <paramref name="source"/> is sorted.
            </summary>
            <typeparam name="T">Element <paramref name="item"/>.</typeparam>
            <param name="source">Where the index of <paramref name="item"/> will be looked for.</param>
            <param name="item">The object to locate in the <paramref name="source"/>. The value can be <see langword="null"/> for reference types.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements. Use <see langword="null"/> to use <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.</param>
            <returns>The zero-based index of value in the sorted <paramref name="source"/>, if <paramref name="item"/> is found;<br/>
            otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or,<br/>
            if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Enderlook.Collections.BinarySearchExtensions.BinarySearchFirst``1(``0[],``0,System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the zero-based index of the first occurrence of a value in the <paramref name="source"/> or in a portion of it.<br/>
            Only use if <paramref name="source"/> is sorted.
            </summary>
            <typeparam name="T">Element <paramref name="item"/>.</typeparam>
            <param name="source">Where the index of <paramref name="item"/> will be looked for.</param>
            <param name="item">The object to locate in the <paramref name="source"/>. The value can be <see langword="null"/> for reference types.</param>
            <param name="index">The zero-based starting index of the range to search.</param>
            <param name="count">The length of the range to search.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements. Use <see langword="null"/> to use <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.</param>
            <returns>The zero-based index of value in the sorted <paramref name="source"/>, if <paramref name="item"/> is found;<br/>
            otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or,<br/>
            if there is no larger element, the bitwise complement of Count.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Enderlook.Collections.BinarySearchExtensions.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Searches the entire sorted <see cref="T:System.Collections.Generic.IList`1"/> for <paramref name="item"/> and returns the zero-based index of the element.
            </summary>
            <typeparam name="T">Type of <paramref name="item"/>.</typeparam>
            <param name="source"><see cref="T:System.Collections.Generic.IList`1"/> where <paramref name="item"/> will be looked for.</param>
            <param name="item">Element to look for.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements. Use <see langword="null"/> to use <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.</param>
            <returns>The zero-based index of item in the sorted <see cref="T:System.Collections.Generic.IList`1"/>, if item is found;<br/>
            otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or,<br/>
            if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Enderlook.Collections.BinarySearchExtensions.BinarySearchFirst``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the zero-based index of the first occurrence of a value in the <paramref name="source"/> or in a portion of it.<br/>
            Only use if <paramref name="source"/> is sorted.
            </summary>
            <typeparam name="T">Element <paramref name="item"/>.</typeparam>
            <param name="source">Where the index of <paramref name="item"/> will be looked for.</param>
            <param name="item">The object to locate in the <paramref name="source"/>. The value can be <see langword="null"/> for reference types.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements. Use <see langword="null"/> to use <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.</param>
            <returns>The zero-based index of value in the sorted <paramref name="source"/>, if <paramref name="item"/> is found;<br/>
            otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or,<br/>
            if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> is <see langword="null"/></exception>
        </member>
        <member name="T:Enderlook.Collections.IListExtensions">
            <summary>
            Extension functions for <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.IListExtensions.RemoveBy``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},System.Boolean,System.Int32)">
            <summary>
            Removes an element from a list if matches a criteria determined by <paramref name="selector"/>.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="source">List to remove item.</param>
            <param name="selector">Function to determine if the item must be removed.</param>
            <param name="ascendOrder">Whenever it must remove in ascending or descending order.</param>
            <param name="removeAmount">Amount of items which must the criteria must be removed. On 0, nothing happens and <paramref name="selector"/> is never executed.</param>
            <returns><paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="selector"/> are <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="removeAmount"/> is negative.</exception>
            <seealso cref="M:Enderlook.Collections.IListExtensions.RemoveFirstBy``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},System.Int32)"/>
            <seealso cref="M:Enderlook.Collections.IListExtensions.RemoveLastBy``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},System.Int32)"/>
        </member>
        <member name="M:Enderlook.Collections.IListExtensions.RemoveFirstBy``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},System.Int32)">
            <summary>
            Removes the fist(s) element(s) from a list which matches a criteria determined by <paramref name="selector"/>.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="source">List to remove item.</param>
            <param name="selector">Function to determine if the item must be removed.</param>
            <param name="removeAmount">Amount of items which must the criteria must be removed. On 0, nothing happens and <paramref name="selector"/> is never executed.</param>
            <returns><paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="selector"/> are <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="removeAmount"/> is negative.</exception>
        </member>
        <member name="M:Enderlook.Collections.IListExtensions.RemoveLastBy``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},System.Int32)">
            <summary>
            Removes the last(s) element(s) from a list which matches a criteria determined by <paramref name="selector"/>.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="source">List to remove item.</param>
            <param name="selector">Function to determine if the item must be removed.</param>
            <param name="removeAmount">Amount of items which must the criteria must be removed. On 0, nothing happens and <paramref name="selector"/> is never executed.</param>
            <returns><paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="selector"/> are <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="removeAmount"/> is negative.</exception>
        </member>
        <member name="M:Enderlook.Collections.IListExtensions.RemoveByAll``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all the elements from a list which matches a criteria determined by <paramref name="selector"/>.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="source">List to remove item.</param>
            <param name="selector">Function to determine if the item must be removed.</param>
            <returns><paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="selector"/> are <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.Collections.IListExtensions.ChangeEach``1(System.Collections.Generic.IList{``0},System.Func{``0,``0})">
            <summary>
            Performs the specified <paramref name="function"/> on each element of the <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of the element in <paramref name="source"/>.</typeparam>
            <param name="source">Source to look for element to perform the <paramref name="function"/></param>
            <param name="function">Function to perform on each element of <paramref name="source"/></param>
            <returns>Updated <paramref name="source"/>.</returns>
            <seealso cref="M:System.Array.ForEach``1(``0[],System.Action{``0})"/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="function"/> are <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.Collections.IListExtensions.ChangeEach``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32,``0})">
            <summary>
            Performs the specified <paramref name="function"/> on each element of the <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of the element in <paramref name="source"/>.</typeparam>
            <param name="source">Source to look for element to perform the <paramref name="function"/></param>
            <param name="function">Function to perform on each element of <paramref name="source"/></param>
            <returns>Updated <paramref name="source"/>.</returns>
            <seealso cref="M:System.Array.ForEach``1(``0[],System.Action{``0})"/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="function"/> are <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.Collections.IListExtensions.PopFirst``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove and returns the element at the begging of <paramref name="source"/>.<br/>
            </summary>
            <typeparam name="T">Type of element to remove.</typeparam>
            <param name="source"><see cref="T:System.Collections.Generic.IList`1"/> where element is taken.</param>
            <returns>Element removed from the begging of <paramref name="source"/>.</returns>
            <remarks>This is an O(n) operation.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="source"/> count is 0.</exception>
        </member>
        <member name="M:Enderlook.Collections.IListExtensions.TryPopFirst``1(System.Collections.Generic.IList{``0},``0@)">
            <summary>
            Try to remove and return the element at the begging of <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of element to remove.</typeparam>
            <param name="source"><see cref="T:System.Collections.Generic.IList`1"/> where element is taken.</param>
            <param name="element">Element removed from the begging of <paramref name="source"/>, if return is <see langword="true"/></param>
            <returns>Whenever an element was removed or not (<paramref name="source"/> is empty).</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> is <see langword="null"/>.</exception>
            <remarks>This is an O(n) operation.</remarks>
        </member>
        <member name="M:Enderlook.Collections.IListExtensions.PopLast``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove and returns the element at the end of <paramref name="source"/>.<br/>
            </summary>
            <typeparam name="T">Type of element to remove.</typeparam>
            <param name="source"><see cref="T:System.Collections.Generic.IList`1"/> where element is taken.</param>
            <returns>Element removed from the end of <paramref name="source"/>.</returns>
            <remarks>This is an O(1) amortized O(n) operation.</remarks>
            <exception cref="T:System.ArgumentException">Throw when <paramref name="source"/> is 0 or negative.</exception>
        </member>
        <member name="M:Enderlook.Collections.IListExtensions.TryPopLast``1(System.Collections.Generic.IList{``0},``0@)">
            <summary>
            Try to remove and return the element at the end of <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of element to remove.</typeparam>
            <param name="source"><see cref="T:System.Collections.Generic.IList`1"/> where element is taken.</param>
            <param name="element">Element removed from the end of <paramref name="source"/>, if return is <see langword="true"/></param>
            <returns>Whenever an element was removed or not (<paramref name="source"/> is empty).</returns>
            <remarks>This is an O(1) amortized O(n) operation.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.Collections.IListExtensions.AddFirst``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Add <paramref name="element"/> at begging of <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of element to add.</typeparam>
            <param name="source"><see cref="T:System.Collections.Generic.IList`1"/> where elements are added.</param>
            <param name="element">Element to add at begging of <paramref name="source"/>.</param>
            <remarks>This is an O(n) operation.</remarks>
        </member>
        <member name="M:Enderlook.Collections.IListExtensions.RemoveAtOrdered``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Remove several elements from <paramref name="source"/> at indexes <paramref name="indexes"/>.<br/>
            Indexes must be sorted from lowest to higher or undefined behavior will happen.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="source"><see cref="T:System.Collections.Generic.IList`1"/> where elements are removed.</param>
            <param name="indexes">Indexes to remove.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="indexes"/> are <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the last element of <paramref name="indexes"/> (the highest) is greater or equal than <paramref name="source"/> <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.</exception>
        </member>
        <member name="M:Enderlook.Collections.IListExtensions.RemoveAtOrdered``1(System.Collections.Generic.IList{``0},System.Int32[])">
            <summary>
            Remove several elements from <paramref name="source"/> at indexes <paramref name="indexes"/>.<br/>
            Indexes must be sorted from lowest to higher or undefined behavior will happen.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="source"><see cref="T:System.Collections.Generic.IList`1"/> where elements are removed.</param>
            <param name="indexes">Indexes to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the last element of <paramref name="indexes"/> (the highest) is greater or equal than <paramref name="source"/> <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.</exception>
        </member>
        <member name="M:Enderlook.Collections.IListExtensions.RemoveAt``1(System.Collections.Generic.IList{``0},System.Int32[])">
            <summary>
            Remove several elements from <paramref name="source"/> at indexes <paramref name="indexes"/>.
            <paramref name="indexes"/> become ordered after executing this method.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="source"><see cref="T:System.Collections.Generic.IList`1"/> where elements are removed.</param>
            <param name="indexes">Indexes to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the last element of <paramref name="indexes"/> (the highest) is greater or equal than <paramref name="source"/> <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.</exception>
        </member>
        <member name="M:Enderlook.Collections.IListExtensions.RemoveAt``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Remove several elements from <paramref name="source"/> at indexes <paramref name="indexes"/>.<br/>
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="source"><see cref="T:System.Collections.Generic.IList`1"/> where elements are removed.</param>
            <param name="indexes">Indexes to remove.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="indexes"/> are <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the last element of <paramref name="indexes"/> (the highest) is greater or equal than <paramref name="source"/> <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.</exception>
        </member>
        <member name="M:Enderlook.Collections.IListExtensions.RandomPickWeighted``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Single})">
            <summary>
            Returns a random element from <paramref name="source"/> taking into account its weight produced by <paramref name="weighter"/>.
            </summary>
            <typeparam name="T">Type of the element in <paramref name="source"/>.</typeparam>
            <param name="source">Source to look for a random element.</param>
            <param name="weighter">Produce weight of elements.</param>
            <returns>Random element from <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="weighter"/> are <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="source"/> count is 0.</exception>
        </member>
        <member name="M:Enderlook.Collections.IListExtensions.RandomPickWeighted``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{System.Single})">
            <summary>
            Returns a random element from <paramref name="source"/> taking into account its weight from <paramref name="weights"/>.
            </summary>
            <typeparam name="T">Type of the element in <paramref name="source"/>.</typeparam>
            <param name="source">Source to look for a random element.</param>
            <param name="weights">Weight of each element.</param>
            <returns>Random element from <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="weights"/> are <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when parameters doesn't have same length.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="source"/> or <paramref name="weights"/> count is 0.</exception>
        </member>
        <member name="M:Enderlook.Collections.IListExtensions.ForEach``1(System.Collections.Generic.IList{``0},System.Action{``0})">
            <summary>
            Performs the specified <paramref name="action"/> on each element of the <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of the element in <paramref name="source"/>.</typeparam>
            <param name="source">Source to look for element to perform the <paramref name="action"/></param>
            <param name="action">Action to perform on each element of <paramref name="source"/></param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="action"/> are <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.Collections.IListExtensions.ForEach``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32})">
            <summary>
            Performs the specified <paramref name="action"/> on each element of the <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of the element in <paramref name="source"/>.</typeparam>
            <param name="source">Source to look for element to perform the <paramref name="action"/></param>
            <param name="action">Action to perform on each element of <paramref name="source"/></param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="action"/> are <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.Collections.IListExtensions.Suffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Suffle element of <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of elements in <paramref name="source"/>.</typeparam>
            <param name="source"><see cref="T:System.Collections.Generic.IList`1"/> to shuffle.</param>
        </member>
        <member name="T:Enderlook.Collections.IReadOnlyCollectionExtensions">
            <summary>
            Extension functions for <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.IReadOnlyCollectionExtensions.CopyTo``1(System.Collections.Generic.IReadOnlyCollection{``0},``0[],System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/>
        </member>
        <member name="T:Enderlook.Collections.IReadOnlyListExtensions">
            <summary>
            Extension functions for <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.IReadOnlyListExtensions.ForEach``1(System.Collections.Generic.IReadOnlyList{``0},System.Action{``0})">
            <summary>
            Performs the specified <paramref name="action"/> on each element of the <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of the element in <paramref name="source"/>.</typeparam>
            <param name="source">Source to look for element to perform the <paramref name="action"/></param>
            <param name="action">Action to perform on each element of <paramref name="source"/></param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="action"/> are <see langword="null"/>.</exception>
            <seealso cref="M:System.Array.ForEach``1(``0[],System.Action{``0})"/>
        </member>
        <member name="M:Enderlook.Collections.IReadOnlyListExtensions.CopyTo``1(System.Collections.Generic.IReadOnlyCollection{``0},``0[])">
            <inheritdoc cref="M:System.Collections.Generic.List`1.CopyTo(`0[])"/>
        </member>
        <member name="M:Enderlook.Collections.IReadOnlyListExtensions.CopyTo``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32,``0[],System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)"/>
        </member>
        <member name="T:Enderlook.Collections.QueueExtensions">
            <summary>
            Extension functions for <see cref="T:System.Collections.Queue"/> and <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.QueueExtensions.EnqueueRange``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enqueue elements from <paramref name="values"/> into <paramref name="source"/>.
            </summary>
            <param name="source">Where elements will be enqueue.</param>
            <param name="values">Elements to enqueue.</param>
        </member>
        <member name="M:Enderlook.Collections.QueueExtensions.EnqueueRange(System.Collections.Queue,System.Collections.IEnumerable)">
            <summary>
            Enqueue elements from <paramref name="values"/> into <paramref name="source"/>.
            </summary>
            <param name="source">Where elements will be enqueue.</param>
            <param name="values">Elements to enqueue.</param>
        </member>
        <member name="T:Enderlook.Collections.StackExtensions">
            <summary>
            Extension functions for <see cref="T:System.Collections.Stack"/> and <see cref="T:System.Collections.Generic.Stack`1"/>.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.StackExtensions.PushRange``1(System.Collections.Generic.Stack{``0},``0[])">
            <summary>
            Push elements from <paramref name="values"/> into <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">Where elements will be pushed.</param>
            <param name="values">Elements to push.</param>
        </member>
        <member name="M:Enderlook.Collections.StackExtensions.PushRange``1(System.Collections.Generic.Stack{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Push elements from <paramref name="values"/> into <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">Where elements will be pushed.</param>
            <param name="values">Elements to push.</param>
        </member>
        <member name="M:Enderlook.Collections.StackExtensions.PushRange(System.Collections.Stack,System.Object[])">
            <summary>
            Push elements from <paramref name="values"/> into <paramref name="source"/>.
            </summary>
            <param name="source">Where elements will be pushed.</param>
            <param name="values">Elements to push.</param>
        </member>
        <member name="M:Enderlook.Collections.StackExtensions.PushRange(System.Collections.Stack,System.Collections.IEnumerable)">
            <summary>
            Push elements from <paramref name="values"/> into <paramref name="source"/>.
            </summary>
            <param name="source">Where elements will be pushed.</param>
            <param name="values">Elements to push.</param>
        </member>
    </members>
</doc>
